// authController.js

const bcrypt = require('bcrypt');
const Client = require('../models/client');

const authController = {};

authController.showLogin = (req, res) => {
    res.render('login'); // Renderiza la vista de inicio de sesión
};

authController.showRegister = (req, res) => {
    res.render('register'); // Renderiza la vista de registro
};

authController.login = async (req, res) => {
    const { userClient, passClient } = req.body;

    try {
        const client = await Client.findOne({ where: { userClient } });

        if (!client || !bcrypt.compareSync(passClient, client.passClient_hash)) {
            return res.status(401).send('Credenciales incorrectas');
        }

        req.session.client = client; // Almacena al cliente en la sesión
        res.redirect('/dashboard'); // Redirige a la página de dashboard u otra ruta
    } catch (error) {
        console.error(error);
        res.status(500).send('Error interno del servidor');
    }
};

authController.register = async (req, res) => {
    const { userClient, passClient } = req.body;

    try {
        const hashedPassword = bcrypt.hashSync(passClient, 10);
        const newClient = await Client.create({ userClient, passClient_hash: hashedPassword });

        req.session.client = newClient; // Almacena al cliente en la sesión
        res.redirect('/dashboard'); // Redirige a la página de dashboard u otra ruta
    } catch (error) {
        console.error(error);
        res.status(500).send('Error interno del servidor');
    }
};


authController.logout = (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            console.error(err);
            res.status(500).send('Error al cerrar sesión');
        } else {
            res.redirect('/');
        }
    });
};

module.exports = authController;
